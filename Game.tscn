[gd_scene load_steps=11 format=2]

[ext_resource path="res://Invesitigator.tscn" type="PackedScene" id=1]
[ext_resource path="res://item.tscn" type="PackedScene" id=2]
[ext_resource path="res://icon.png" type="Texture" id=3]
[ext_resource path="res://Camera2D.gd" type="Script" id=4]
[ext_resource path="res://LampPost.tscn" type="PackedScene" id=5]
[ext_resource path="res://Icon.gd" type="Script" id=6]
[ext_resource path="res://assets/tileset/tileset_tileset.tres" type="TileSet" id=7]

[sub_resource type="Environment" id=3]
background_mode = 4
background_energy = 2.0
auto_exposure_enabled = true
auto_exposure_scale = 0.02
auto_exposure_min_luma = 0.0
auto_exposure_max_luma = 0.82
dof_blur_far_distance = 2.0
dof_blur_far_amount = 0.33
glow_enabled = true
glow_intensity = 1.52
glow_strength = 0.49
glow_bloom = 0.09
glow_blend_mode = 0

[sub_resource type="Shader" id=7]
code = "

shader_type canvas_item;


uniform bool overlay = false;

uniform float scanlines_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float scanlines_width : hint_range(0.0, 0.5) = 0.25;
uniform float grille_opacity : hint_range(0.0, 1.0) = 0.3;
uniform vec2 resolution = vec2(640.0, 480.0); 

uniform bool pixelate = true; 

uniform bool roll = true;
uniform float roll_speed = 8.0; 
uniform float roll_size : hint_range(0.0, 100.0) = 15.0;
uniform float roll_variation : hint_range(0.1, 5.0) = 1.8;
uniform float distort_intensity : hint_range(0.0, 0.2) = 0.05; 

uniform float noise_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float noise_speed = 5.0;

uniform float static_noise_intensity : hint_range(0.0, 1.0) = 0.06;

uniform float aberration : hint_range(-1.0, 1.0) = 0.03; 
uniform float brightness = 1.4; 
uniform bool discolor = true; 

uniform float warp_amount :hint_range(0.0, 5.0) = 1.0; 
uniform bool clip_warp = false;

uniform float vignette_intensity = 0.4; 
uniform float vignette_opacity : hint_range(0.0, 1.0) = 0.5;


vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}


float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),
                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),
                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) * 0.5 + 0.5;
}


vec2 warp(vec2 uv){
	vec2 delta = uv - 0.5;
	float delta2 = dot(delta.xy, delta.xy);
	float delta4 = delta2 * delta2;
	float delta_offset = delta4 * warp_amount;
	
	return uv + delta * delta_offset;
}

float border (vec2 uv){
	float radius = min(warp_amount, 0.08);
	radius = max(min(min(abs(radius * 2.0), abs(1.0)), abs(1.0)), 1e-5);
	vec2 abs_uv = abs(uv * 2.0 - 1.0) - vec2(1.0, 1.0) + radius;
	float dist = length(max(vec2(0.0), abs_uv)) / radius;
	float square = smoothstep(0.96, 1.0, dist);
	return clamp(1.0 - square, 0.0, 1.0);
}


float vignette(vec2 uv){
	uv *= 1.0 - uv.xy;
	float vignette = uv.x * uv.y * 15.0;
	return pow(vignette, vignette_intensity * vignette_opacity);
}

void fragment()
{
	vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV); 
	vec2 text_uv = uv;
	vec2 roll_uv = vec2(0.0);
	float time = roll ? TIME : 0.0;
	


	if (pixelate)
	{
		text_uv = ceil(uv * resolution) / resolution;
	}
	
	
	float roll_line = 0.0;
	if (roll || noise_opacity > 0.0)
	{
		
		roll_line = smoothstep(0.3, 0.9, sin(uv.y * roll_size - (time * roll_speed) ) );

		roll_line *= roll_line * smoothstep(0.3, 0.9, sin(uv.y * roll_size * roll_variation - (time * roll_speed * roll_variation) ) );
		
		roll_uv = vec2(( roll_line * distort_intensity * (1.-UV.x)), 0.0);
	}
	
	vec4 text;
	if (roll)
	{
		
		text.r = texture(SCREEN_TEXTURE, text_uv + roll_uv * 0.8 + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv + roll_uv * 1.2 - vec2(aberration, 0.0) * .1 ).g;
		text.b = texture(SCREEN_TEXTURE, text_uv + roll_uv).b;
		text.a = 1.0;
	}
	else
	{
		
		text.r = texture(SCREEN_TEXTURE, text_uv + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv - vec2(aberration, 0.0) * .1).g;
		text.b = texture(SCREEN_TEXTURE, text_uv).b;
		text.a = 1.0;
	}
	//never gonna give you up!
	float r = text.r;
	float g = text.g;
	float b = text.b;
	
	uv = warp(UV);
	
	if (grille_opacity > 0.0){
		
		float g_r = smoothstep(0.85, 0.95, abs(sin(uv.x * (resolution.x * 3.14159265))));
		r = mix(r, r * g_r, grille_opacity);
		
		float g_g = smoothstep(0.85, 0.95, abs(sin(1.05 + uv.x * (resolution.x * 3.14159265))));
		g = mix(g, g * g_g, grille_opacity);
		
		float b_b = smoothstep(0.85, 0.95, abs(sin(2.1 + uv.x * (resolution.x * 3.14159265))));
		b = mix(b, b * b_b, grille_opacity);
		
	}
	
	
	text.r = clamp(r * brightness, 0.0, 1.0);
	text.g = clamp(g * brightness, 0.0, 1.0);
	text.b = clamp(b * brightness, 0.0, 1.0);
	
	
	float scanlines = 0.5;
	if (scanlines_opacity > 0.0)
	{
		
		scanlines = smoothstep(scanlines_width, scanlines_width + 0.5, abs(sin(uv.y * (resolution.y * 3.14159265))));
		text.rgb = mix(text.rgb, text.rgb * vec3(scanlines), scanlines_opacity);
	}
	
	
	if (noise_opacity > 0.0)
	{
		
		float noise = smoothstep(0.4, 0.5, noise(uv * vec2(2.0, 200.0) + vec2(10.0, (TIME * (noise_speed))) ) );
		
		
		roll_line *= noise * scanlines * clamp(random((ceil(uv * resolution) / resolution) + vec2(TIME * 0.8, 0.0)).x + 0.8, 0.0, 1.0);

		text.rgb = clamp(mix(text.rgb, text.rgb + roll_line, noise_opacity), vec3(0.0), vec3(1.0));
	}
	

	if (static_noise_intensity > 0.0)
	{
		text.rgb += clamp(random((ceil(uv * resolution) / resolution) + fract(TIME)).x, 0.0, 1.0) * static_noise_intensity;
	}
	
	
	text.rgb *= border(uv);
	text.rgb *= vignette(uv);
	
	if (clip_warp)
	{
		text.a = border(uv);
	}
	float saturation = 0.5;
	float contrast = 1.2;
	if (discolor)
	{
		// Saturation
		vec3 greyscale = vec3(text.r + text.g + text.b) / 3.;
		text.rgb = mix(text.rgb, greyscale, saturation);
		
		// Contrast
		float midpoint = pow(0.5, 2.2);
		text.rgb = (text.rgb - vec3(midpoint)) * contrast + midpoint;
	}
	
	COLOR = text;
}"

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 7 )
shader_param/overlay = false
shader_param/scanlines_opacity = 0.4
shader_param/scanlines_width = 0.25
shader_param/grille_opacity = 0.3
shader_param/resolution = Vector2( 1280, 960 )
shader_param/pixelate = false
shader_param/roll = true
shader_param/roll_speed = 3.0
shader_param/roll_size = 10.0
shader_param/roll_variation = 4.0
shader_param/distort_intensity = 0.2
shader_param/noise_opacity = 0.5
shader_param/noise_speed = 1.0
shader_param/static_noise_intensity = 0.06
shader_param/aberration = -0.015
shader_param/brightness = 1.4
shader_param/discolor = true
shader_param/warp_amount = 1.0
shader_param/clip_warp = false
shader_param/vignette_intensity = 0.3
shader_param/vignette_opacity = 0.5

[node name="Game" type="Node2D"]

[node name="WorldBg" type="Control" parent="."]
margin_left = -2560.0
margin_top = -1500.0
margin_right = 2560.0
margin_bottom = 1500.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ColorRect" type="ColorRect" parent="WorldBg"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -7.0
margin_top = -265.0
margin_right = -7.0
margin_bottom = 36.0
color = Color( 0.27451, 0.101961, 0.101961, 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 3 )

[node name="Invesitigator" parent="." instance=ExtResource( 1 )]

[node name="Camera2D" type="Camera2D" parent="Invesitigator"]
current = true
smoothing_enabled = true
smoothing_speed = 4.0
script = ExtResource( 4 )

[node name="item" parent="." instance=ExtResource( 2 )]
position = Vector2( 281, 338 )

[node name="Lamps" type="MultiMeshInstance2D" parent="."]

[node name="RustyLampPost" parent="Lamps" instance=ExtResource( 5 )]
position = Vector2( 803, 263 )

[node name="RustyLampPost2" parent="Lamps" instance=ExtResource( 5 )]
position = Vector2( 151, 403 )

[node name="RustyLampPost3" parent="Lamps" instance=ExtResource( 5 )]
position = Vector2( 620, 430 )

[node name="RustyLampPost4" parent="Lamps" instance=ExtResource( 5 )]
position = Vector2( 362, 217 )

[node name="RustyLampPost5" parent="Lamps" instance=ExtResource( 5 )]
position = Vector2( 723, -107 )

[node name="RustyLampPost6" parent="Lamps" instance=ExtResource( 5 )]
position = Vector2( 379, -166 )

[node name="RustyLampPost7" parent="Lamps" instance=ExtResource( 5 )]
position = Vector2( 236, -379 )

[node name="RustyLampPost8" parent="Lamps" instance=ExtResource( 5 )]
position = Vector2( 906, -406 )

[node name="RustyLampPost9" parent="Lamps" instance=ExtResource( 5 )]
position = Vector2( 565, -420 )

[node name="CanvasLayer" type="CanvasLayer" parent="."]

[node name="Icon" type="Sprite" parent="CanvasLayer"]
material = SubResource( 5 )
position = Vector2( 1999, -367 )
rotation = -3.13639
scale = Vector2( 19.0177, 11.0991 )
texture = ExtResource( 3 )
flip_h = true
script = ExtResource( 6 )

[node name="TileMap" type="TileMap" parent="."]
tile_set = ExtResource( 7 )
format = 1
tile_data = PoolIntArray( -720899, 0, 196614, -720898, 0, 393219, -720897, 0, 393219, -786432, 0, 393219, -786431, 0, 393219, -786430, 0, 393219, -786429, 0, 393219, -786428, 0, 393219, -786427, 0, 393219, -786426, 0, 393219, -786425, 0, 393219, -786424, 0, 393219, -786423, 0, 393219, -786422, 0, 393219, -786421, 0, 393219, -786420, 0, 393219, -786419, 0, 393219, -786418, 0, 393219, -786417, 0, 393219, -786416, 0, 393219, -786415, 0, 393219, -786414, 0, 393219, -786413, 0, 393219, -786412, 0, 196617, -655363, 0, 262149, -720876, 0, 262149, -589827, 0, 262149, -655340, 0, 262149, -524291, 0, 262149, -589804, 0, 262149, -458755, 0, 262149, -524268, 0, 262149, -393219, 0, 262149, -458732, 0, 262149, -327683, 0, 262149, -393196, 0, 262149, -262147, 0, 262149, -327660, 0, 262149, -196611, 0, 262149, -262124, 0, 262149, -131075, 0, 262149, -196588, 0, 262149, -65539, 0, 262149, -131052, 0, 262149, -3, 0, 262149, -65516, 0, 262149, 65533, 0, 262149, 20, 0, 262149, 131069, 0, 262149, 65556, 0, 262149, 196605, 0, 262149, 131092, 0, 262149, 262141, 0, 262149, 196628, 0, 262149, 327677, 0, 262149, 262164, 0, 262149, 393213, 0, 262149, 327700, 0, 262149, 458749, 0, 262149, 393236, 0, 262149, 524285, 0, 262149, 458772, 0, 262149, 589821, 0, 262149, 524308, 0, 262149, 655357, 0, 393222, 655358, 0, 393219, 655359, 0, 393219, 589824, 0, 393219, 589825, 0, 393219, 589826, 0, 393219, 589827, 0, 393219, 589828, 0, 393219, 589829, 0, 393219, 589830, 0, 393219, 589831, 0, 393219, 589832, 0, 393219, 589833, 0, 393219, 589834, 0, 393219, 589835, 0, 393219, 589836, 0, 393219, 589837, 0, 393219, 589838, 0, 393219, 589839, 0, 393219, 589840, 0, 393219, 589841, 0, 393219, 589842, 0, 393219, 589843, 0, 393219, 589844, 0, 393225 )
